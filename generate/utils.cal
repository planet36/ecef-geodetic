## SPDX-FileCopyrightText: Steven Ward
## SPDX-License-Identifier: OSL-3.0

define current_year_local() {
	return substr(ctime(), 21, 4);
}

define print_cpp_file_header(author, license, generated_by_file_name,
	brief_description, detailed_description) {

	printf("// SPDX-FileCopyrightText: %s
// SPDX-License-Identifier: %s

/// %s
/**
\\file
\\author %s
%s
*/

// Generated by \"%s\" on (@%s) %s
#pragma once
", author, license,
	brief_description,
	author,
	detailed_description,
	generated_by_file_name,
	time(), ctime()); /* ctime prints a trailing newline */
}

/* get the size of the triangular square matrix from its array of values */
define get_tri_sq_mat_order(arr) {
	return floor(sqrt(2 * size(arr)));
}

/* get the size of the strictly triangular square matrix from its array of values */
define get_strict_tri_sq_mat_order(arr) {
	return get_tri_sq_mat_order(arr)+1;
}

/* get the sum of 1 + ... + n */
define partial_sum(n) {
	return n*(n+1)/2;
}

/* create an upper triangular square matrix from the array of values */
define mat_ut(arr) {
	local i, j, k, N, A;

	N = get_tri_sq_mat_order(arr);
	A = mat[N,N];

	/* for every row */
	for (i = matmin(A,1); i <= matmax(A,1); i++) {
		/* for every col */
		for (j = matmin(A,2); j <= matmax(A,2); j++) {
			if (i <= j) {
				k = i*N+j-partial_sum(i);
				/*printf("(%d, %d)\t=> %d\n", i, j, k);*/
				A[i,j] = arr[k];
			}
		}
	}

	return A;
}

/* create a strictly upper triangular square matrix from the array of values */
define mat_sut(arr) {
	local i, j, k, N, A;

	N = get_strict_tri_sq_mat_order(arr);
	A = mat[N,N];

	/* for every row */
	for (i = matmin(A,1); i <= matmax(A,1); i++) {
		/* for every col */
		for (j = matmin(A,2); j <= matmax(A,2); j++) {
			if (i < j) {
				k = i*N+j-partial_sum(i+1);
				/*printf("(%d, %d)\t=> %d\n", i, j, k);*/
				A[i,j] = arr[k];
			}
		}
	}

	return A;
}

/* create a lower triangular square matrix from the array of values */
define mat_lt(arr) {
	local i, j, k, N, A;

	N = get_tri_sq_mat_order(arr);
	A = mat[N,N];

	/* for every row */
	for (i = matmin(A,1); i <= matmax(A,1); i++) {
		/* for every col */
		for (j = matmin(A,2); j <= matmax(A,2); j++) {
			if (i >= j) {
				k = i*N+j-(partial_sum(N-1)-partial_sum(N-1-i));
				/*printf("(%d, %d)\t=> %d\n", i, j, k);*/
				A[i,j] = arr[k];
			}
		}
	}

	return A;
}

/* create a strictly lower triangular square matrix from the array of values */
define mat_slt(arr) {
	local i, j, k, N, A;

	N = get_strict_tri_sq_mat_order(arr);
	A = mat[N,N];

	/* for every row */
	for (i = matmin(A,1); i <= matmax(A,1); i++) {
		/* for every col */
		for (j = matmin(A,2); j <= matmax(A,2); j++) {
			if (i > j) {
				k = i*N+j-(partial_sum(N)-partial_sum(N-i));
				/*printf("(%d, %d)\t=> %d\n", i, j, k);*/
				A[i,j] = arr[k];
			}
		}
	}

	return A;
}

define is_upper_triangular(A) {
	local i, j;

	/* for every row */
	for (i = matmin(A,1); i <= matmax(A,1); i++) {
		/* for every col */
		for (j = matmin(A,2); j <= matmax(A,2); j++) {
			if (i > j) {
				if (A[i,j] != 0) {
					return 0;
				}
			}
		}
	}

	return 1;
}

define is_strictly_upper_triangular(A) {
	local i, j;

	/* for every row */
	for (i = matmin(A,1); i <= matmax(A,1); i++) {
		/* for every col */
		for (j = matmin(A,2); j <= matmax(A,2); j++) {
			if (i >= j) {
				if (A[i,j] != 0) {
					return 0;
				}
			}
		}
	}

	return 1;
}
